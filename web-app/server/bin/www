#!/usr/bin/env node

require('dotenv').config();
const app = require("../src/app");
const debug = require("debug")("desbordante:server");
const http = require("http");

const port = normalizePort(process.env.SERVER_PORT);
app.set('port', port);
var host = process.env.SERVER_HOST;

const server = http.createServer(app);

server.listen(port, () => {
    console.log(`App listening at http://localhost:${port}`)
})
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
    const port = parseInt(val, 10);
    if (isNaN(port)) {
      return val;
    }
    if (port >= 0) {
      return port;
    }
    const errorMessage = `Incorrect port value ${val}`;
    throw new Error(errorMessage);
}

function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
}

function onListening() {
    const address = server.address();
    const bind = typeof address === "string"
        ? "pipe " + address
        : "port " + address.port;
    debug('Listening on ' + bind);
}